// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/cache/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/merkulovlad/wbtech-go/internal/model"
)

// MockInterfaceCache is a mock of InterfaceCache interface.
type MockInterfaceCache struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceCacheMockRecorder
}

// MockInterfaceCacheMockRecorder is the mock recorder for MockInterfaceCache.
type MockInterfaceCacheMockRecorder struct {
	mock *MockInterfaceCache
}

// NewMockInterfaceCache creates a new mock instance.
func NewMockInterfaceCache(ctrl *gomock.Controller) *MockInterfaceCache {
	mock := &MockInterfaceCache{ctrl: ctrl}
	mock.recorder = &MockInterfaceCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterfaceCache) EXPECT() *MockInterfaceCacheMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockInterfaceCache) Get(key string) (*model.Order, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInterfaceCacheMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInterfaceCache)(nil).Get), key)
}

// Set mocks base method.
func (m *MockInterfaceCache) Set(key string, value *model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockInterfaceCacheMockRecorder) Set(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockInterfaceCache)(nil).Set), key, value)
}
