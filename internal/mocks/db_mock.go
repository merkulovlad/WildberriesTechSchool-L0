// Code generated by MockGen. DO NOT EDIT.
// Source: internal/db/repository/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/merkulovlad/wbtech-go/internal/model"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetOrder mocks base method.
func (m *MockRepository) GetOrder(ctx context.Context, id string) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, id)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockRepositoryMockRecorder) GetOrder(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockRepository)(nil).GetOrder), ctx, id)
}

// GetRecent mocks base method.
func (m *MockRepository) GetRecent(ctx context.Context, limit int) ([]*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecent", ctx, limit)
	ret0, _ := ret[0].([]*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecent indicates an expected call of GetRecent.
func (mr *MockRepositoryMockRecorder) GetRecent(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecent", reflect.TypeOf((*MockRepository)(nil).GetRecent), ctx, limit)
}

// UpsertOrder mocks base method.
func (m *MockRepository) UpsertOrder(ctx context.Context, o *model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertOrder", ctx, o)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertOrder indicates an expected call of UpsertOrder.
func (mr *MockRepositoryMockRecorder) UpsertOrder(ctx, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertOrder", reflect.TypeOf((*MockRepository)(nil).UpsertOrder), ctx, o)
}
